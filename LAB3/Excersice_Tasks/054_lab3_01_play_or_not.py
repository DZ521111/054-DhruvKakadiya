# -*- coding: utf-8 -*-
"""054_Lab3_01_Play_or_Not.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l3VrSfRUe9tP_s-uE74IUQVCaNBwi81N
"""

'''
Author: Dhruv B Kakadiya

'''

from google.colab import drive
drive.mount("/content/drive")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets, preprocessing
from sklearn.naive_bayes import GaussianNB, MultinomialNB

"""# Roll No :- **54** | Task Performed on Dataset2.csv"""

# reading data into main_data

main_data = pd.read_csv("/content/drive/MyDrive/Sem7_ML_Data/LAB03/Dataset2.csv")

# labelEncoder Object
label_encoder = preprocessing.LabelEncoder()

for data in main_data:
  print(f"\n\nHeading :- {data}")
  print(list(main_data[data]))
  main_data[data] = label_encoder.fit_transform(main_data[data])
  print(f"\n\nAfter the tranformation of {data}")
  print(list(main_data[data]))

# now zip all the features of atmosphere

combined_features = tuple(zip(main_data["Outlook"], main_data["Temp"], main_data["Wind"], main_data["Humidity"]))
print("After combined!")

print("Outlook, Temp, Wind, Humidity\n\n")
for pair in combined_features:
    print(pair)

"""## Roll Number is **54**:- Perform Task on Dataset2 and train test split (90% - 10%)"""

# train test division 90% - 10% bcz my Roll No is 54
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(combined_features, main_data["Class"], test_size = 0.10, random_state = 54)
# 48 random state is accepted value by many researcher

# create model
model = MultinomialNB()
model.fit(X_train, Y_train)

# Predict Y from X_text
Y_predicted = model.predict(X_test)

print(Y_predicted)

from sklearn import metrics

print(f"Accuracy is :- {metrics.accuracy_score(Y_test, Y_predicted)}")

# print precision and recall
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score


precision = precision_score(Y_test, Y_predicted)
recall = recall_score(Y_test, Y_predicted)


print(f"precision :- {precision}")
print(f"recall :- {recall}")

# Excersice
# Task1

# Temp = "Hot" and Weather = "overcast"

output = model.predict([[0, 1, 1, 2]])
print(f"final prediction :- {output}")

# Excersice
# Task1

# Temp = "Mild" and Weather = "sunny"

output = model.predict([[2, 2, 1, 2]])
print(f"final prediction :- {output}")

